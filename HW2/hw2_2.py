# -*- coding: utf-8 -*-
"""HW2_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19OiX_VsNWCmitbOzhgKG6L2uCCxmL-lq
"""

import condacolab
condacolab.install()

import subprocess
import requests
from Bio import SeqIO
import re
import json

"""# Get seqkit statistics"""

def seqkit_stat(file):
  seqkit = subprocess.run(("seqkit", "stats", file, "-a"),
                            capture_output=True,
                            text=True)
  if seqkit.stderr != '':
    return seqkit.stderr, 'invalid'
  out = seqkit.stdout.strip().split('\n')
  result = dict(zip(out[0].split()[1:], out[1].split()[1:]))
  return result, result['type']

"""# Get biopython info"""

reuni = '[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}'
resem = 'ENS[A-Z]{1,6}[0-9]{11}|MGP_[A-Za-z0-9]{2,10}_(E|G|P|R|T|GT|FM)[0-9]+'

def parse_sequences(file_path: str, seq_type: str):
    sequences_list = []
    descriptions_list = []
    sequence_data_list = []
    db_type = ''

    sequences = SeqIO.parse(file_path, 'fasta')

    if seq_type == 'DNA':
        db_type = 'ENSEMBL'
        for sequence in sequences:
            gene_name = sequence.id.split('.')[0]
            if re.match(resem, gene_name):
                sequences_list.append(gene_name)
                descriptions_list.append(sequence.description)
                sequence_data_list.append(sequence.seq)

    if seq_type == 'Protein':
        db_type = 'Uniprot'
        for sequence in sequences:
            gene_name = sequence.id.split('|')[1]
            if re.match(reuni, gene_name):
                sequences_list.append(gene_name)
                descriptions_list.append(sequence.description)
                sequence_data_list.append(sequence.seq)

    return sequence_data_list, descriptions_list, sequences_list, db_type

"""# Funktions from HW2_1"""

def get_uniprot(ids: list):
  accessions = ','.join(ids)
  endpoint = "https://rest.uniprot.org/uniprotkb/accessions"
  http_args = {'params': {'accessions': accessions}}
  return requests.get(endpoint, **http_args)

def get_ensembl(ids: list):
  id = json.dumps({'ids': ids})
  endpoint = "https://rest.ensembl.org/lookup/id"
  headers={ "Content-Type" : "application/json", "Accept" : "application/json"}
  http_function = requests.post
  http_args = {'headers': headers,'data': id}
  return http_function(endpoint, **http_args)

def uniprot_parse_response(resp: dict):
    resp = resp.json()
    resp = resp["results"]
    output = {}
    for val in resp:
        acc = val['primaryAccession']
        species = val['organism']['scientificName']
        gene = val['genes']
        seq = val['sequence']
        output[acc] = {'organism':species, 'geneInfo':gene, 'sequenceInfo':seq, 'type':'protein'}

    return output

def ensembl_parse_response(resp: dict):
    resp = resp.json()
    output = {}
    for key,value in resp.items():
        species = resp[key]['species']
        otype = resp[key]['object_type']
        biotype = resp[key]['biotype']
        start = resp[key]['start']
        end = resp[key]['end']
        output[key] = {'organism':species, 'start': start, 'end': end, 'object_type':otype, 'biotype':biotype}
    return output

"""# Function to get response"""

def parse_response(file):

    stats, ftype = seqkit_stat(file)

    if ftype == 'invalid':
        return stats

    seq, descr, ids, database = parse_sequences(file, ftype)

    if database == 'Uniprot':
        response = get_uniprot(ids)
        output = uniprot_parse_response(response)
    elif database == 'ENSEMBL':
        response = get_ensembl(ids)
        output = ensembl_parse_response(response)
    else:
        raise TypeError('ids are not from Uni or Ens')

    sequences_info = dict(zip(ids, zip(seq, descr)))

    print("--------- Statistics ---------")
    for key, value in stats.items():
        print(f"{key}: {value}")

    print("--------- Sequences Info ---------")
    for seq_id, (sequence, description) in sequences_info.items():
        print(f'ID: {seq_id}')
        print(f'Description: {description}')
        print(f'Sequence: {sequence}')
        print(f'Database: {database}')
        for key, value in output[seq_id].items():
            print(f"{key}: {value}")
        print("------------------")

    return